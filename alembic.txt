# init

## run
alembic init alembic

## alembic.ini
file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(rev)s_%%(slug)s

## env.py
from bafser.db_session import SqlAlchemyBase
from bafser.utils.import_all_tables import import_all_tables
import bafser_config
import_all_tables()
target_metadata = SqlAlchemyBase.metadata

if os.environ.get("dev", "0") == "1":
    db_path = bafser_config.db_dev_path
    issqlite = True
else:
    db_path = bafser_config.db_path
    issqlite = not bafser_config.db_mysql

if issqlite:
    config.set_main_option("sqlalchemy.url", f"sqlite:///{db_path}?check_same_thread=False")
    if not os.path.exists(db_path):
        dirname = os.path.dirname(db_path)
        if dirname != "":
            os.makedirs(dirname, exist_ok=True)
        with open(db_path, "w"): pass
else:
    config.set_main_option("sqlalchemy.url", f"mysql+pymysql://{db_path}?charset=UTF8mb4")

---
context.configure(
    ...
    render_as_batch=issqlite,

## drop all tables

## run
set dev=1
alembic revision --autogenerate -m "init"
alembic upgrade head


# usage

## if running local
set dev=1

## add version
alembic revision --autogenerate -m "version name"

## upgrade
alembic upgrade head
python3.9 -m alembic.config upgrade head

## set version (for existing db without alembic)
alembic stamp %version_id%
